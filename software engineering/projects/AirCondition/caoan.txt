分布式温控系统主从协议

二大班四组

起草者：10班4组庞昊

修订者：6班4组史柠玮 8班4组崔毅 9班4组侯涛 10班4组庞昊

版本：1.0

修订次数：1



0. 约定

在本协议中，以Tip开头的正文并不具有强制力，即建议选项



1. 实体

本协议将进行沟通的实体分为三种：

主机-中央空调

从机-各房间内的从控机

物理-负责各房间温度模拟的模块

虽然实现很有可能将从机与物理模块合并且共用相同的网络传输模块，因为权责的不同，本协议仍然将他们区别看待。

本协议将只涉及主机与从机/物理之间的信息交互。从机与物理共享同一个网络端口。



2. 实体间的交互-消息

本协议涉及的所有信息基于TCP Socket，如下所述：

从控->主控： 温度测量值（刷新）,认证请求，送风请求，停止送风请求

主控->从控： 工作模式和默认工作温度， 用电和计费总额，温度测量值刷新频率

主控->物理： 送风温度及风速

本协议不涉及的状态有：

从控：温度上下限（从机自定）

主机：单位耗电量计费（从机对此一无所知）

物理：各风速下温度变化速度（物理自定）



3. 消息的定义

所有信息交互采用Json格式。关于Json格式，参阅http://json.org/json-zh.html 标准参阅https://tools.ietf.org/html/rfc7159。

注意，Json将字符串定义为Unicode字符串，因此网络模块应当特别注意编码问题。GBK/ANSI可能并不被识别。

一个消息定义为一个总长不超过1024字节的Json元素，即以下消息(注意，任何属性名称都是小写，任何属性值如果是字符串，都不区分大小写)：



	温度测量值：  {"type"="temp", "temp"=TEMPERATURE}， 其中TEMPERATURE为int

	认证请求：    {"type"="auth", "room"=ROOMNUMSTR, "id"=IDSTR}， 其中ROOMNUMSTR为varchar()，IDSTR为char(18)

	送风请求：    {"type"="startwind", "desttemp"=TEMPERATURE, "velocity"=WINDVELOCITYSTR}， 其中TEMPERATURE为int，WINDVELOCITYSTR为"HIGH", "MEDIUM" 或 "LOW"。这个消息包中的desttemp属性其实是冗余的，以防对需求的理解变化，此项保留。

	停止送风请求：{"type"="stopwind"}



	温度测量值刷新频率： {"type"="freshrate", "freshperiod"=SECONDS}，其中SECONDS为int

	工作模式及工作温度： {"type"="mode", "workingmode"=MODESTR, "defaulttemp"=TEMPERATURE}，其中MODESTR为"COLD"或"HOT"，TEMPERATURE为int

	用电和计费总额：     {"type"="bill", "kwh"=KWH, "bill"=BILL}，其中KWH为浮点数，精确到小数点后两位，BILL为浮点数，精确到小数点后两位



	送风温度及风速：     {"type"="wind", "windtemp"=TEMPERATURE, "velocity"=WINDVELOCITYSTR}，其中WINDVELOCITYSTR为"HIGH", "MEDIUM" , "LOW" 或 "NONE"（停止送风），TEMPERATURE为int



4. 消息之间的关系-如何使用

温度测量值和温度测量值刷新频率

温度测量值刷新频率及温度测量值最为简单，他们不与其他消息有任何关系。

从机上线时发送一次温度测量值，此时主机将从机的连接信息（IP和端口）记下，并发送温度测量值刷新频率。此后，主机可以在任意时刻发送温度测量值刷新频率，从机则按照收到的温度测量值刷新频率来发送温度测量值。

Tip:建议将这一对消息建议作为主从之间的Keep-alive（心跳包）来使用，即，若从机在N倍刷新时间后仍未收到从机发送的温度测量值，应当视为从机发生故障，并报告管理人员。

Tip:这一条Tip还是被保留了，因为主机似乎不会主动发送回应，不具有监测从机的能力，所以还是建议实现这一点



认证请求

认证请求之间的消息代表一次消费（旅客从开房到退房）。登出来源于主机管理员的操作。认证请求间可以互相覆盖。

从机应当在收到注册成功过的"工作模式和工作温度"后再允许用户设置目标温度。



送风请求、温度测量值

从机根据默认工作模式和温度目标值/温度测量值来决定是否发送送风请求。

从机不应当在一秒内连续发送两次送风请求，但是这一点由实现保证，主机应当能够处理一秒内任意数量的送风请求。



工作模式及工作温度

主机在（被正确处理后的）认证请求后应当回复工作模式和工作温度。然而，工作模式及工作温度可以在任意时刻由主机发送给从机

在发送送风请求前，从机根据此消息中的默认工作温度和默认工作模式对是否需要发出送风请求进行判断。如果判断的结果是不发出，则应当提示用户。



用电和计费总额

此消息基于纯粹的把用户最关心的数据显示给他们的目的。

Tip:因为用电量和计费额都精确到小数点后两位，因此主机建议使用一个观察者模式发送此消息，即，仅当用电量和计费额发生变动时，发送此消息。



5. 示例

下面是对一次消费过程中所有消息包的示例

假设此时为夏季（默认模式为"COLD"),默认工作温度20,温度刷新率3s/次



事件              方向        消息包

从机开机          从机->主机  [{"type"="temp", "temp"=34}]

温度测量值刷新率  主机->从机  [{"type"="freshrate", "freshperiod"=3}]

用户输入验证信息  从机->主机  [{"type"="auth", "room"="A15", "ID"="123456789012344567"}]

认证请求回复      主机->从机  [{"type"="mode", "workingmode"="COLD", "defaulttemp"=20}]

用户调整目标温度  从机->主机  从机自上一次用户调整温度开始等待一秒

用户调整目标温度  从机->主机  从机自上一次用户调整温度开始等待一秒

用户调整风速      从机->主机  从机继续等待上一秒

用户停止调整温度  从机->主机  [{"type"="startwind", "desttemp"=22, "velocity"="HIGH"}]

送风温度及风速    主机->物理  [{"type"="wind", "windtemp"=20, "velocity"="HIGH"}]

用电和计费总额    主机->从机  [{"type"="bill", "kwh"=0.01, "bill"=0.01}]

...

用电和计费总额    主机->从机  [{"type"="bill", "kwn"=20.00, "bill"=14.00}]

室温达到20        从机->主机  [{"type"="stopwind"}]

送风冷暖及风速    主机->物理  [{"type"="wind", "velocity"="NONE", "windtemp"=20}]

...

用户调整目标温度  从机->主机  从机判断目标温度过高，与当前工作模式不符，不发送请求